// Implementation using Groq API - DEMO VERSION
// This file is for demonstration purposes only
// In production, this would be a secure serverless function with proper environment variables

// Mock implementation that doesn't use actual API keys
const mockLLM = {
  invoke: async (prompt) => {
    // Simulate API response delay
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Return mock response
    return {
      content: "This is a mock response from XyLo.Dev. In a production environment, this would be generated by the Groq API using proper authentication and environment variables."
    };
  }
};

export const handler = async (event) => {
  // Only allow POST requests
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method Not Allowed' }),
      headers: { 'Content-Type': 'application/json' }
    };
  }

  try {
    // Parse the request body
    const { message } = JSON.parse(event.body);
    
    if (!message) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: 'Message is required' }),
        headers: { 'Content-Type': 'application/json' }
      };
    }
    
    // Sample documents for context
    const documents = [
      {
        content: "XyLo.Dev provides advanced AI assistance with state-of-the-art language models.",
        metadata: {
          source: "XyLo.Dev Documentation",
          score: 0.95
        }
      },
      {
        content: "Our technology leverages the latest advancements in artificial intelligence to deliver accurate and helpful responses.",
        metadata: {
          source: "XyLo.Dev Technology Overview",
          score: 0.87
        }
      },
      {
        content: "XyLo.Dev can be used in various scenarios such as customer support, research assistance, content creation, and data analysis.",
        metadata: {
          source: "XyLo.Dev Use Cases",
          score: 0.92
        }
      },
      {
        content: "The XyLo.Dev architecture uses vector embeddings to efficiently retrieve relevant information from knowledge bases.",
        metadata: {
          source: "XyLo.Dev Technical Whitepaper",
          score: 0.97
        }
      }
    ];
    
    // Simple relevance matching
    const relevantDocs = documents.filter(doc => 
      doc.content.toLowerCase().includes(message.toLowerCase().substring(0, 5))
    ).slice(0, 2);
    
    // If no relevant docs found, use the first two documents
    const docsToUse = relevantDocs.length > 0 ? relevantDocs : documents.slice(0, 2);
    
    // Create context from relevant documents
    const context = docsToUse.map(doc => doc.content).join('\n\n');
    
    // Create prompt with context
    const prompt = `
You are XyLo.Dev, an advanced AI assistant. Use the following context to answer the user's question.
If the context doesn't contain relevant information, just answer based on your knowledge.

CONTEXT:
${context}

USER QUESTION:
${message}

ANSWER:
`;
    
    // In a production environment, this would use the actual Groq API
    // For demo purposes, we use a mock implementation
    try {
      // Get mock response
      const response = await mockLLM.invoke(prompt);
      
      return {
        statusCode: 200,
        body: JSON.stringify({ 
          response: response.content,
          sources: docsToUse
        }),
        headers: { 'Content-Type': 'application/json' }
      };
    } catch (error) {
      console.error('Mock LLM Error:', error.message);
      
      // Return a more specific error message
      return {
        statusCode: 500,
        body: JSON.stringify({ 
          error: 'Error generating response. Please try again later.',
          details: "This is a mock error response."
        }),
        headers: { 'Content-Type': 'application/json' }
      };
    }
  } catch (error) {
    console.error('Error:', error.message, error.stack);
    
    return {
      statusCode: 500,
      body: JSON.stringify({ error: 'Internal Server Error' }),
      headers: { 'Content-Type': 'application/json' }
    };
  }
};
